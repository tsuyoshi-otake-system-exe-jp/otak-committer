# コード規約

## 1. プロジェクト構造
```
src/
├── commands/       # コマンド実装
│   ├── generateCommit.ts
│   └── generatePR.ts
├── constants/      # 定数定義
├── languages/      # 多言語サポート
│   ├── asian.ts
│   ├── european.ts
│   ├── index.ts
│   └── middleEastern.ts
├── services/       # サービス層
│   ├── git.ts
│   ├── github.ts
│   └── openai.ts
├── types/         # 型定義
│   ├── git.ts
│   ├── github.ts
│   ├── language.ts
│   └── messageStyle.ts
├── test/          # テストコード
└── extension.ts   # エントリーポイント
```

## 2. コーディング規則

### 2.1 一般規則
- TypeScript Strict Modeを使用
- インターフェースと型定義の明示的な作成
- async/awaitを使用した非同期処理
- エラーハンドリングの徹底

### 2.2 命名規則
- ファイル名: キャメルケース（例: generateCommit.ts）
- クラス名: パスカルケース（例: GitService）
- インターフェース名: パスカルケース、接頭辞Iなし
- メソッド名: キャメルケース
- 変数名: キャメルケース
- 定数: アッパースネークケース

### 2.3 エラーハンドリング
- サービスレベルでの詳細なエラー情報
- ユーザーレベルでの分かりやすいメッセージ
- カスタムエラークラスの使用
- エラーの伝播と適切なキャッチ

### 2.4 VS Code API利用
- VS Code APIの型定義の活用
- 設定値の型安全な取得
- UI要素の一貫性（QuickPick, Progress等）
- コマンドの適切な登録と解放

### 2.5 外部API通信
- エラーハンドリングの実装
- タイムアウト設定（30秒）
- プロキシ対応
- レスポンス型の定義

### 2.6 多言語対応
- 言語設定の型安全な実装
- システムプロンプトの分離
- 言語固有の設定の集約
- UIの国際化対応

### 2.7 Git操作
- VS Code Git APIの使用
- 変更の自動ステージング
- エラー時の適切なロールバック
- コミットメッセージの検証

### 2.8 OpenAI API
- APIキーの安全な管理
- プロンプトの言語別管理
- トークン制限の実装
- 生成結果の検証

### 2.9 テスト規約
- ユニットテストの必須化
- モックの適切な使用
- テストケースの網羅
- CI/CD環境での実行

## 3. コメント規則
- 関数の説明はJSDoc形式
- 複雑なロジックへの説明コメント
- TODO/FIXMEの使用と追跡
- 非自明な実装への説明

## 4. セキュリティ
- APIキーの安全な保存
- プロキシ設定の適切な処理
- 機密情報の適切な取り扱い
- エラーメッセージでの機密情報の除外

## 5. パフォーマンス
- 非同期処理の適切な実装
- メモリリークの防止
- リソースの適切な解放
- 大規模リポジトリでの動作考慮

## 6. メンテナンス
- CHANGELOG.mdの更新
- バージョン管理の徹底
- 依存関係の最新化
- 技術的負債の管理