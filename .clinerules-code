# Code Conventions

## 1. Project Structure and Dependencies

### 1.1 Basic Structure

```
src/
├── commands/       # Command implementations
│   ├── generateCommit.ts  # Generate commit messages
│   ├── generateIssue.ts   # Issue generation
│   └── generatePR.ts      # PR generation
├── services/       # Service layer
│   ├── git.ts            # Git operations (diff retrieval, state management)
│   ├── github.ts         # GitHub API (PR/Issue creation)
│   ├── issueGenerator.ts # Issue generation logic
│   └── openai.ts         # OpenAI API (text generation)
├── languages/      # Multilingual support
│   ├── asian.ts           # Asian languages
│   ├── european.ts        # Western languages
│   ├── middleEastern.ts   # Middle Eastern languages
│   ├── english.ts         # English prompts
│   ├── japanese.ts        # Japanese prompts
│   └── index.ts           # Aggregation of language settings
├── types/         # Type definitions
│   ├── git.ts     # Git-related types
│   ├── github.ts  # GitHub-related types
│   ├── language.ts # Language-related types
│   └── messageStyle.ts # Message style definitions
└── utils/         # Utility functions
    ├── fileSelector.ts # File selection UI
    └── preview.ts     # Preview display
```

### 1.2 Dependencies of Main Components

#### Entry Point
- `extension.ts`
  - Initializes the extension and loads configurations
  - Registers commands (generateCommit, generateIssue, generatePR)
  - Manages language settings (`LANGUAGE_CONFIGS`) and message styles

#### Commands Dependencies
- `generateCommit.ts`
  - → `git.ts`: Retrieve diffs
  - → `openai.ts`: Generate messages
  - → `messageStyle.ts`: Style definitions
  - → `commitGuide.ts`: Prefix information

- `generateIssue.ts`
  - → `issueGenerator.ts`: Issue generation logic
  - → `git.ts`: Repository analysis
  - → `github.ts`: Issue creation
  - → `fileSelector.ts`: File selection UI
  - → `preview.ts`: Preview display

- `generatePR.ts`
  - → `github.ts`: Branch information and PR creation
  - → `git.ts`: Local operations
  - → `openai.ts`: Title and body generation
  - → `preview.ts`: Preview display

#### Role and Collaboration within the Service Layer
- `git.ts`: Local Git operations
- `github.ts`: GitHub API operations
- `issueGenerator.ts`: Integrated issue generation
- `openai.ts`: Natural language generation
  - Works in conjunction with language files to generate prompts

## 2. Coding Guidelines

### 2.1 TypeScript Settings
- `strict`: true
- `noImplicitAny`: true
- `esModuleInterop`: true
- `skipLibCheck`: true

### 2.2 API Service Implementation

```typescript file: APIService.ts
export class APIService {
    private client: Client;
    
    constructor(config: Config) {
        this.client = new Client(config);
    }
    
    static async initialize(): Promise<APIService | undefined> {
        // Initialization logic
    }
    
    async operation(): Promise<Result> {
        try {
            // Execute operation
        } catch (error: any) {
            throw new Error(`Failed: ${error.message}`);
        }
    }
}
```

### 2.3 Multilingual Support

```typescript file: languagePrompt.ts
export const getPrompt = (type: PromptType): string => {
    const prompts = {
        system: `...`,
        commit: `...`,
        pr: `...`
    };
    return prompts[type] || '';
};
```

### 2.4 Error Handling

```typescript file: errorHandling.ts
try {
    await operation();
} catch (error: any) {
    vscode.window.showErrorMessage(`Error: ${error.message}`);
    return undefined;
}
```

## 3. Feature Implementation

### 3.1 Commit Message Generation
1. Retrieve Git diff (via `git.ts`)
2. Generate text using the OpenAI API (`openai.ts`)
3. Apply the message style
4. Reflect the changes in the SCM input field

### 3.2 Issue Generation
1. Select the type of Issue
2. Choose the files to analyze (via `fileSelector.ts`)
3. Generate a preview (via `preview.ts`)
4. Create the GitHub Issue (via `github.ts`)

### 3.3 PR Generation
1. Retrieve branch information and diff
2. Generate the title and body using OpenAI
3. Display a preview for confirmation
4. Execute the PR creation

### 3.4 Configuration Management

```typescript file: config.ts
const config = vscode.workspace.getConfiguration('otakCommitter');
const language = config.get<string>('language') || 'japanese';
const messageStyle = config.get<MessageStyle>('messageStyle') || 'normal';
```

## 4. Testing Guidelines

### 4.1 Unit Tests

```typescript file: componentTest.ts
suite('Component Test', () => {
    test('should behave correctly', () => {
        // Test cases
    });
});
```

### 4.2 Configuration Tests

```typescript file: configurationTest.ts
test('Configuration loads', () => {
    const config = vscode.workspace.getConfiguration('otakCommitter');
    assert.ok(config.get('setting'));
});
```

## 5. Build and Packaging

```bash file: build.sh
npm run vscode:prepublish && npx @vscode/vsce package
```

## 6. Environment Variables

- `OPENAI_API_KEY`: OpenAI API key
- `GITHUB_TOKEN`: GitHub personal access token

## 7. Dependency Management

- `simple-git`: Git client
- `openai`: OpenAI API SDK
- `@types/*`: Type definition packages

## 8. Code Review Criteria

1. Ensure type safety
2. Thorough error handling
3. Proper utilization of configuration values
4. Consistency in interfaces
5. Consideration for performance

## 9. Performance Considerations

1. Proper use of asynchronous processing
2. Memory usage optimization
3. Control of API calls
4. Utilization of caching

## 10. Security

1. Secure management of API keys
2. Appropriate handling of tokens
3. Protection of sensitive information
4. Validation of input values