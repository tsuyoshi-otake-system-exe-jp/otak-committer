# コード規約

## 1. プロジェクト構造
- src/
  - commands/: 各コマンドの実装
  - constants/: 定数定義
  - languages/: 多言語サポートの設定
  - services/: API通信などのサービス
  - types/: 型定義
  - test/: テストコード
  - extension.ts: エントリーポイント

## 2. コーディング規約

### 2.1 一般規則
- TypeScriptの厳格な型チェックを有効にする
- インターフェースや型定義は必ず作成する
- プロキシ対応を必須とする

### 2.2 エラーハンドリング
- OpenAI API通信時のエラーは詳細情報を含める
- プロキシ設定に関するエラーは設定情報を含める
- ユーザーフレンドリーなエラーメッセージを表示

### 2.3 多言語対応
- 新しい言語追加時のルール:
  1. src/languages/に適切なカテゴリで追加
  2. LANGUAGE_CONFIGSに設定を追加
  3. systemPromptとdiffMessageを定義

### 2.4 コミットメッセージスタイル
- simple: 100トークン、核となる変更のみ
- normal: 200トークン、簡潔な説明付き
- detailed: 500トークン、詳細な文脈と影響を含む

## 3. API通信

### 3.1 OpenAI API
- API呼び出しにはタイムアウト制御（30秒）を設定
- temperature: 0.2で一貫性重視
- chatgpt-4o-latestモデルを使用

### 3.2 プロキシ対応
- VSCodeのHTTPプロキシ設定を使用
- https-proxy-agentパッケージで実装

## 4. Git操作
- VS Code Git APIを使用（vscode.git）
- 未ステージングの変更は自動でステージング
- コミットメッセージ生成前にdiffを取得

## 5. UI/UX規約

### 5.1 ステータスバー
- 現在の言語を表示
- クイックアクセスメニューを提供
- ツールチップに設定情報を表示

### 5.2 通知
- 進捗表示はProgressLocationを使用
- エラーメッセージは具体的な対処方法を含める
- 自動ステージング時は一時的な通知を表示

## 6. パッケージング規約
- esbuildでバンドル
- 外部依存はVSCodeを除外
- プロダクションビルドは最小化

## 7. 設定項目
- openaiApiKey: OpenAI APIキー
- language: コミットメッセージの言語
- messageStyle: メッセージスタイル
- customMessage: カスタムプロンプト追加用

## 8. バージョニング
- Semantic Versioning準拠
- CHANGELOGの更新必須
- VSIXパッケージの作成必須

# ドキュメント構成

設計ドキュメントは以下の構造で管理:

docs/
├── README.md (全体の概要)
├── features/
│   ├── pr-feature-design.md (PR機能の設計)
│   └── message-style-update-design.md (メッセージスタイル拡張の設計)
└── technical/
    ├── logical-design.md (論理設計)
    └── code-rules.md (コード規約)